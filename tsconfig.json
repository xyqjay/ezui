{
  "compilerOptions": {
    "target": "es5", // 指定 ECMAScript 版本 编译后将生成指定版本的js代码
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ], // 要包含在编译中的依赖库文件列表
    "allowJs": true, // 允许编译 JavaScript 文件
    "skipLibCheck": true, // 跳过所有声明文件的类型检查
    "esModuleInterop": true, // 禁用命名空间引用 (import * as fs from "fs") 启用 CJS/AMD/UMD 风格引用 (import fs from "fs")  (默认到导出需要export default，开启allowSyntheticDefaultImports后如果不写default，会默认添加)
    "allowSyntheticDefaultImports": true, // 允许从没有默认导出的模块进行默认导入 允许从模块进行默认导入而没有默认导出。这不影响代码发出，仅影响类型检查。
    "strict": true, // 启用所有严格类型检查选项
    "forceConsistentCasingInFileNames": true, // 不允许对同一个文件使用不一致格式的引用 禁止对同一文件使用大小写不一致的引用。
    "noFallthroughCasesInSwitch": true, // 在switch语句中报告失败情况的错误。
    "module": "esnext", // 指定模块代码生成
    "moduleResolution": "node", // 使用 Node.js 风格解析模块 node/classic（node模式 文件直接在node_modules文件夹里查找；classic模式 文件优先到外层文件夹查找，如果没有找到则再去node_modules文件夹下查找）
    "resolveJsonModule": true, // 允许使用 .json 扩展名导入的模块
    "isolatedModules": false, // 执行其他检查，以确保单独的编译（例如withtranspileModule或@ babel / plugin-transform-typescript）是安全的。
    "noEmit": true, // 不输出(意思是不编译代码，只执行类型检查)
    "jsx": "react", // 在.tsx文件中支持JSX

    "experimentalDecorators": true, //允许装饰器模式
    "sourceMap": false, // 生成相应的.map文件
    "declaration": true, // 生成相应的.d.ts文件
    "noUnusedLocals": true, // 报告未使用的本地变量的错误
    "noUnusedParameters": true, // 报告未使用参数的错误
    "incremental": true, // 通过从以前的编译中读取/写入信息到磁盘上的文件来启用增量编译
    "strictNullChecks": true, // 在严格的null检查模式下，nullandundefined值不在每种类型的域中，并且只能分配给它们自己any（和，undefined也可以分配给void）。 默认所有类型（Number、Boolean、String、Symbol）都包含null和undefined类型，开启strictNullChecks后则不包含
    "noImplicitAny": false, // 开启后不允许隐式使用any类型
  },
  "include": [
    "src" // *** TypeScript文件应该进行类型检查 ***
  ],
  "exclude": ["node_modules", "build"] // *** 不进行类型检查的文件 ***
}
